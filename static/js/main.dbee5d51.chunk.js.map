{"version":3,"sources":["components/navbar/index.js","components/jumbotron/index.js","components/gameBoard/index.js","components/Wrapper/index.js","components/gameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["navbar","props","className","href","score","topScore","jumbotron","GameBoard","children","Wrapper","GameCard","onClick","handleItemClick","id","src","image","alt","name","App","state","data","shuffleArray","array","i","length","j","Math","floor","random","temp","guessedCorrect","newData","map","item","newItem","clicked","setState","handleCorrect","handleIncorrect","this","gameData","newScore","newTopScore","max","alert","resetData","Fragment","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wwCAiBeA,MAdf,SAAgBC,GACd,OAGE,yBAAKC,UAAU,+CACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,eAGA,uBAAGD,UAAU,WAAb,UAA+BD,EAAMG,MAArC,mBAA4DH,EAAMI,Y,MCGvDC,MAXjB,WACI,OACI,yBAAKJ,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,gBACA,uBAAGA,UAAU,QAAb,+E,MCDDK,MAJf,SAAmBN,GACjB,OAAO,yBAAKC,UAAU,gBAAgBD,EAAMO,W,MCG/BC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCY1BE,MAbf,SAAkBT,GAChB,OACE,yBAAKC,UAAU,OAAOS,QAAS,kBAAMV,EAAMW,gBAAgBX,EAAMY,MAC7D,yBAAKC,IAAKb,EAAMc,MAAOb,UAAU,eAAec,IAAKf,EAAMgB,S,kOCuGpDC,E,2MAhGbC,MAAQ,CACNf,MAAO,EACPC,SAAU,EACVe,KAAM,I,EASRC,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEf,OAAOP,G,EAITV,gBAAkB,SAAAC,GACd,IAAIiB,GAAiB,EAEjBC,EAAU,EAAKZ,MAAMC,KAAKY,KAAI,SAAAC,GAChC,IAAMC,E,yVAAO,IAAQD,GAQrB,OANIC,EAAQrB,KAAOA,IACZqB,EAAQC,UACXD,EAAQC,SAAU,EAClBL,GAAiB,IAGdI,KAITH,EAAU,EAAKV,aAAaU,GAG5B,EAAKK,SAAS,CAAChB,KAAMW,IAErBD,EAAiB,EAAKO,gBAAkB,EAAKC,mB,mFApC/CC,KAAKH,SAAS,CAAChB,KAAMoB,M,sCAwCrB,IAAMC,EAAWF,KAAKpB,MAAMf,MAAQ,EAC9BC,EAAWkC,KAAKpB,MAAMd,SACtBqC,EAAchB,KAAKiB,IAAIF,EAASpC,GACtCkC,KAAKH,SAAS,CAAChC,MAAOqC,EAAUpC,SAAUqC,M,wCAI1CE,MAAM,wCACNL,KAAKH,SAAS,CAAChC,MAAO,IACtBmC,KAAKM,c,kCAKLN,KAAKH,SAAS,CAAChB,KAAMoB,M,+BAIb,IAAD,OACP,OACE,kBAAC,IAAMM,SAAP,KACE,kBAAC,EAAD,CAEE1C,MAAOmC,KAAKpB,MAAMf,MAClBC,SAAUkC,KAAKpB,MAAMd,WAEvB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGkC,KAAKpB,MAAMC,KAAKY,KAAI,SAAAZ,GAAI,OACvB,kBAAC,EAAD,CACE2B,IAAK3B,EAAKP,GACVA,GAAIO,EAAKP,GACTI,KAAMG,EAAKH,KACXF,MAAOK,EAAKL,MACZoB,QAASf,EAAKe,QACdvB,gBAAiB,EAAKA,4B,GAtFpBoC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dbee5d51.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction navbar(props) {\r\n  return (\r\n    // Traditional Bootstrap...\r\n    // <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Clicky Game\r\n      </a>\r\n      <p className=\"navText\">Score: {props.score}  |  Top Score: {props.topScore}</p>\r\n      \r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Clicky Game!</h1>\r\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction GameBoard(props) {\n  return <div className=\"card-columns\">{props.children}</div>\n}\n\nexport default GameBoard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.handleItemClick(props.id)}>\r\n        <img src={props.image} className=\"card-img-top\" alt={props.name}/>\r\n        {/* <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{props.name}</h5>\r\n            <p className=\"card-text\">{props.clicked}</p>\r\n        </div> */}\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameCard;\r\n","import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\n// import data from './data.json'\nimport gameData from './data.json'\nimport Navbar from './components/navbar';\nimport Jumbotron from './components/jumbotron';\nimport GameBoard from './components/gameBoard';\nimport Wrapper from './components/Wrapper'\nimport Gamecard from './components/gameCard';\n\nclass App extends Component {\n  // State\n  state = {\n    score: 0,\n    topScore: 0,\n    data: []\n  };\n\n  // React LifeCycle\n  componentDidMount() {\n    this.setState({data: gameData});\n  }\n\n  // Custom Methods\n  shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n  };\n\n  // Checks the card clicked value, if not clicked before we'll update value and then shuffle new array and update state...\n  handleItemClick = id => {\n      let guessedCorrect = false;\n      \n      let newData = this.state.data.map(item => {\n        const newItem = { ...item };\n        \n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrect = true;\n          }\n        }\n        return newItem;\n      })\n      \n      // Shuffle the array...\n      newData = this.shuffleArray(newData);\n      \n      // Update state w/New Array which has the clicked state set correctly...\n      this.setState({data: newData});\n\n      guessedCorrect ? this.handleCorrect() : this.handleIncorrect();\n  };\n\n  handleCorrect() {\n    const newScore = this.state.score + 1;\n    const topScore = this.state.topScore;\n    const newTopScore = Math.max(newScore,topScore);\n    this.setState({score: newScore, topScore: newTopScore});\n  };\n\n  handleIncorrect() {\n    alert(\"Already clicked this card! Try again\");\n    this.setState({score: 0});\n    this.resetData();\n  };\n\n  resetData() {\n    // reset state to the original json file data...\n    this.setState({data: gameData});\n  };\n\n  // Render\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          //key={0}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Jumbotron></Jumbotron>\n        <Wrapper>\n          <GameBoard>\n            {this.state.data.map(data => (\n              <Gamecard\n                key={data.id}\n                id={data.id}\n                name={data.name}\n                image={data.image}\n                clicked={data.clicked}\n                handleItemClick={this.handleItemClick}\n              />\n        ))}\n\n          </GameBoard>\n        </Wrapper>\n      </React.Fragment>\n        \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}